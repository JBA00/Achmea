import pandas as pd
import matplotlib.pyplot as plt

def create_df(what_for):
    # Create the data frames
    erasmus_db = pd.read_csv("Erasmus.csv", sep=";")
    mutation_log_db = pd.read_csv("Mutatielog_id.csv", sep=";")
    toelichting_db = pd.read_excel("Toelichting.xlsx")

    # Create new columns for date and time
    mutation_log_db['DatumRegistratie'] = pd.to_datetime(
        mutation_log_db['DatumRegistratie'])

    mutation_log_db['date_column'] = mutation_log_db['DatumRegistratie'].dt.date
    mutation_log_db['time_column'] = mutation_log_db['DatumRegistratie'].dt.time

    # Fix float values.
    for col in erasmus_db.columns:
        try:
            erasmus_db[col] = erasmus_db[col].str.replace(
                ',', '.').astype(float)
        except Exception:
            continue

    # Translate the column into lists, so that maybe we can calculate the number of red flags.
    erasmus_db['SF_woord'] = erasmus_db['SF_woord'].str.replace(' ', '').str.split(',')
    erasmus_db['SF_woord_count'] = [len(x) if isinstance(x, list) and len(x) > 0 else 0 for x in erasmus_db['SF_woord']]
    
    
    for col in erasmus_db.filter(regex='^VT_'):
        try:
            erasmus_db[col] = erasmus_db[col].replace(
                999, None).astype(float)
        except Exception:
            continue

    if what_for=="random_forest":
        erasmus_db.drop("SF_woord", axis=1)
        erasmus_db.drop("id", axis=1)
        erasmus_db.drop("prediction", axis=1)
    if what_for=="eda":
        erasmus_db= erasmus_db[["vm", "polis_2", "polis_5", "age", "status","LG1", "SF_woord_count"]]
        
     
    return erasmus_db

# Code for EDA

df_result = create_df("eda")  

#Find the number of men/women
vm_counts = df_result['vm'].value_counts()

#Bar Plot for the distribution of men/women
plt.figure(figsize=(10, 5))

# Bar plot for gender distribution
plt.subplot(1, 2, 1)
ax = vm_counts.plot(kind='bar', color=['lightblue', 'pink'])
ax.set_xticklabels(['Men', 'Women'], rotation=0)
plt.title('Gender Distribution')
plt.xlabel('Gender')
plt.ylabel('Count')

# Bar plot for percentage distribution of gender
plt.subplot(1, 2, 2)
vm_percentage = vm_counts / vm_counts.sum() * 100
ax = vm_percentage.plot(kind='bar', color=['lightblue', 'pink'])
ax.set_xticklabels(['Men', 'Women'], rotation=0)
plt.title('Percentage Gender Distribution')
plt.xlabel('Gender')
plt.ylabel('Percentage')

plt.tight_layout()
plt.show()


# Create groups for the different ages
bins = [0, 20, 40, 60, float('inf')]
labels = ['15-20', '21-40', '41-60', '61-70']
df_result['age_group'] = pd.cut(df_result['age'], bins=bins, labels=labels, right=False)

# Count the number of each age group
age_group_counts = df_result['age_group'].value_counts()

# Create Pie chart for age group distribution
plt.figure(figsize=(8, 8))
plt.pie(age_group_counts, labels=age_group_counts.index, autopct='%1.1f%%', startangle=90, colors=['lightcoral', 'lightblue', 'lightgreen', 'gold'])
plt.title('Age Group Distribution')
plt.show()


# Rename status values to risk levels
status_mapping = {'S': 'LOW RISK', 'G': 'UNKNOWN RISK', 'A': 'HIGH RISK', 'P': 'HIGH RISK PREMIUM'}
df_result['risk_level'] = df_result['status'].map(status_mapping)
risk_level_counts = df_result['risk_level'].value_counts()

# Create pie chart for Risk distibution
plt.figure(figsize=(8, 8))
plt.pie(risk_level_counts, labels=risk_level_counts.index, autopct='%1.1f%%', startangle=90, colors=['lightcoral', 'lightblue', 'lightgreen', 'gold'])
plt.title('Risk Level Distribution')
plt.show()


#Bar plots for SF_woord_count per Status
status_colors = {'S': 'lightblue', 'G': 'lightsalmon', 'A': 'lightgreen', 'P': 'lightcoral'}

# use rows where SF_woord_count is 0 and 1
df_result_zero_one = df_result[df_result['SF_woord_count'] < 2]
unique_sf_counts = sorted(df_result_zero_one['SF_woord_count'].unique())
num_sf_counts = len(unique_sf_counts)

fig, axes = plt.subplots(nrows=1, ncols=num_sf_counts, figsize=(5 * num_sf_counts, 5), sharey=True)

for i, sf_count in enumerate(unique_sf_counts):
    subset_df = df_result_zero_one[df_result_zero_one['SF_woord_count'] == sf_count]
    status_counts = subset_df['status'].value_counts()
    
    for status, color in status_colors.items():
        count = status_counts.get(status, 0)
        axes[i].bar(status, count, color=color, label=f'Status: {status}')

    axes[i].set_title(f'SF_woord_count = {sf_count}')
    axes[i].set_xlabel('Status')
    axes[i].set_ylabel('Count')
    axes[i].legend()

plt.tight_layout()
plt.show()


# Choose rows where SF_woord_count is in the range [2, 4]
df_result_range_2_4 = df_result[(df_result['SF_woord_count'] >= 2) & (df_result['SF_woord_count'] <= 4)]
unique_sf_counts = sorted(df_result_range_2_4['SF_woord_count'].unique())
num_sf_counts = len(unique_sf_counts)

fig, axes = plt.subplots(nrows=1, ncols=num_sf_counts, figsize=(5 * num_sf_counts, 5), sharey=True)

for i, sf_count in enumerate(unique_sf_counts):
    subset_df = df_result_range_2_4[df_result_range_2_4['SF_woord_count'] == sf_count]
    status_counts = subset_df['status'].value_counts()
    
    for status, color in status_colors.items():
        count = status_counts.get(status, 0)
        axes[i].bar(status, count, color=color, label=f'Status: {status}')

    axes[i].set_title(f'SF_woord_count = {sf_count}')
    axes[i].set_xlabel('Status')
    axes[i].set_ylabel('Count')
    axes[i].legend()

plt.tight_layout()
plt.show()


# Choose rows where SF_woord_count is in the range [5, 7]
df_result_range_5_7 = df_result[(df_result['SF_woord_count'] >= 5) & (df_result['SF_woord_count'] <= 7)]
unique_sf_counts = sorted(df_result_range_5_7['SF_woord_count'].unique())
num_sf_counts = len(unique_sf_counts)

fig, axes = plt.subplots(nrows=1, ncols=num_sf_counts, figsize=(5 * num_sf_counts, 5), sharey=True)

for i, sf_count in enumerate(unique_sf_counts):
    subset_df = df_result_range_5_7[df_result_range_5_7['SF_woord_count'] == sf_count]
    status_counts = subset_df['status'].value_counts()
    
    for status, color in status_colors.items():
        count = status_counts.get(status, 0)
        axes[i].bar(status, count, color=color, label=f'Status: {status}')

    axes[i].set_title(f'SF_woord_count = {sf_count}')
    axes[i].set_xlabel('Status')
    axes[i].set_ylabel('Count')
    axes[i].legend()

plt.tight_layout()
plt.show()



# Define BMI groups
bins = [0, 18.5, 25, 30, 40, float('inf')]
labels = ['Underweight', 'Healthy', 'Overweight', 'Obese', 'Severely obese']

# Create a new column 'BMI_group' based on LG1 values
df_result['BMI_group'] = pd.cut(df_result['LG1'], bins=bins, labels=labels, right=False)

#Bar plots for 'Healthy', 'Overweight', 'Obese' per status
unique_bmi_groups = ['Healthy', 'Overweight', 'Obese'] 
num_bmi_groups = len(unique_bmi_groups)

fig, axes = plt.subplots(nrows=1, ncols=num_bmi_groups, figsize=(5 * num_bmi_groups, 5), sharey=True)

for i, bmi_group in enumerate(unique_bmi_groups):
    subset_df = df_result[df_result['BMI_group'] == bmi_group]
    status_counts = subset_df['status'].value_counts()
    
    for status, color in status_colors.items():
        count = status_counts.get(status, 0)
        axes[i].bar(status, count, color=color, label=f'Status: {status}')

    axes[i].set_title(f'BMI Group: {bmi_group}')
    axes[i].set_xlabel('Status')
    axes[i].set_ylabel('Count')
    axes[i].legend()

plt.tight_layout()
plt.show()

#Bar plots for 'Underweight', 'Severely obese' per status
unique_bmi_groups = [ 'Underweight', 'Severely obese']  # Use the predefined labels
num_bmi_groups = len(unique_bmi_groups)

fig, axes = plt.subplots(nrows=1, ncols=num_bmi_groups, figsize=(5 * num_bmi_groups, 5), sharey=True)

for i, bmi_group in enumerate(unique_bmi_groups):
    subset_df = df_result[df_result['BMI_group'] == bmi_group]
    status_counts = subset_df['status'].value_counts()
    
    for status, color in status_colors.items():
        count = status_counts.get(status, 0)
        axes[i].bar(status, count, color=color, label=f'Status: {status}')

    axes[i].set_title(f'BMI Group: {bmi_group}')
    axes[i].set_xlabel('Status')
    axes[i].set_ylabel('Count')
    axes[i].legend()

plt.tight_layout()
plt.show()


# Histogram for the Insured Amounts
fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(8, 5))

hist, edges, _ = axes.hist(df_result['polis_2'], bins=20, color='skyblue', edgecolor='black', density=False)
axes.set_title('Distribution of Insured Amounts')
axes.set_xlabel('Insured Amount')
axes.set_ylabel('Frequency')

bin_centers = 0.5 * (edges[:-1] + edges[1:])
axes.set_xticks(bin_centers)
axes.set_xticklabels([f'{int(val)}' for val in bin_centers], rotation=45, ha='right')

plt.tight_layout()
plt.show()


# Histograms for Insured amounts per status
unique_statuses = df_result['status'].unique()

fig, axes = plt.subplots(nrows=len(unique_statuses), ncols=1, figsize=(8, 5 * len(unique_statuses)))

for i, status in enumerate(unique_statuses):
    subset_df = df_result[df_result['status'] == status]
    axes[i].hist(subset_df['polis_2'], bins=20, color=status_colors.get(status, 'skyblue'), edgecolor='black')
    axes[i].set_title(f'Distribution of Insured Amounts for Status {status}')
    axes[i].set_xlabel('Insured Amount')
    axes[i].set_ylabel('Frequency')

    bin_centers = 0.5 * (edges[:-1] + edges[1:])
    axes[i].set_xticks(bin_centers)
    axes[i].set_xticklabels([f'{int(val)}' for val in bin_centers], rotation=45, ha='right')

plt.tight_layout()
plt.show()


# Histogram for the Years of Insurance
fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(8, 5))

hist, edges, _ = axes.hist(df_result['polis_5'], bins=20, color='skyblue', edgecolor='black', density=False)
axes.set_title('Distribution of Years of Insurance')
axes.set_xlabel('Years of Insurance')
axes.set_ylabel('Frequency')

bin_centers = 0.5 * (edges[:-1] + edges[1:])
axes.set_xticks(bin_centers)
axes.set_xticklabels([f'{int(val)}' for val in bin_centers], rotation=45, ha='right')

plt.tight_layout()
plt.show()


# Histograms for Years of Insurance per status
fig, axes = plt.subplots(nrows=len(unique_statuses), ncols=1, figsize=(8, 5 * len(unique_statuses)))

for i, status in enumerate(unique_statuses):
    subset_df = df_result[df_result['status'] == status]
    axes[i].hist(subset_df['polis_5'], bins=20, color=status_colors.get(status, 'skyblue'), edgecolor='black')
    axes[i].set_title(f'Distribution of Years of Insurance for Status: {status}')
    axes[i].set_xlabel('Years of Insurance')
    axes[i].set_ylabel('Frequency')

    # Set x-axis tick labels to display actual numbers
    bin_centers = 0.5 * (edges[:-1] + edges[1:])
    axes[i].set_xticks(bin_centers)
    axes[i].set_xticklabels([f'{int(val)}' for val in bin_centers], rotation=45, ha='right')

plt.tight_layout()
plt.show()
